# -*- coding: utf-8 -*-
"""Web Scraper cho BuytTPHCM (Cập nhật API)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HDhzrjOIxfSEQqsHUP-zcAcs4ZKcN5HY

# Setup
"""

!pip install playwright beautifulsoup4 requests
!playwright install

"""# Lấy một tuyến (updated)

"""

import requests
import json
import os

BASE_URL = "http://apicms.ebms.vn/businfo"
HEADERS = {
    "Accept": "*/*",
    "Origin": "http://buyttphcm.com.vn",
    "Referer": "http://buyttphcm.com.vn/",
    "User-Agent": "Mozilla/5.0"
}

def fetch_json(url):
    try:
        resp = requests.get(url, headers=HEADERS)
        if resp.status_code == 200:
            return resp.json()
        else:
            print(f"❌ HTTP {resp.status_code} tại {url}")
            return None
    except Exception as e:
        print(f"❌ Lỗi kết nối {url}: {e}")
        return None

def save_json(data, filename):
    os.makedirs("output", exist_ok=True)
    path = os.path.join("output", filename)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    print(f"✅ Lưu: {filename}")

def main():
    route_id = input("Nhập route_id (ví dụ: 384): ").strip()

    # 1. Lấy thông tin tuyến
    route_info = fetch_json(f"{BASE_URL}/getroutebyid/{route_id}")
    if route_info:
        save_json(route_info, f"route_{route_id}_getroutebyid.json")

    # 2. Lấy timetable
    timetable = fetch_json(f"{BASE_URL}/gettimetablebyroute/{route_id}")
    if not timetable or not isinstance(timetable, list):
        print("❌ Không lấy được timetable hoặc dữ liệu sai định dạng.")
        return
    save_json(timetable, f"route_{route_id}_gettimetablebyroute.json")

    # 3. Lấy danh sách TimeTableId và gọi gettripsbytimetable
    for tt in timetable:
        tt_id = tt.get("TimeTableId")
        if tt_id:
            trips = fetch_json(f"{BASE_URL}/gettripsbytimetable/{route_id}/{tt_id}")
            if trips:
                save_json(trips, f"route_{route_id}_gettripsbytimetable_{tt_id}.json")

    # 4. Lấy danh sách RouteVarId
    variants = fetch_json(f"{BASE_URL}/getvarsbyroute/{route_id}")
    if not variants or not isinstance(variants, list):
        print("❌ Không lấy được RouteVar hoặc dữ liệu sai định dạng.")
        return
    save_json(variants, f"route_{route_id}_getvarsbyroute.json")

    for var in variants:
        route_var_id = var.get("RouteVarId")
        if route_var_id:
            paths = fetch_json(f"{BASE_URL}/getpathsbyvar/{route_id}/{route_var_id}")
            if paths:
                save_json(paths, f"route_{route_id}_getpathsbyvar_{route_var_id}.json")

            stops = fetch_json(f"{BASE_URL}/getstopsbyvar/{route_id}/{route_var_id}")
            if stops:
                save_json(stops, f"route_{route_id}_getstopsbyvar_{route_var_id}.json")

if __name__ == "__main__":
    main()

"""# Kiểm tra danh sách route_id"""

import requests

BASE_URL = "http://apicms.ebms.vn/businfo"

HEADERS = {
    "Accept": "*/*",
    "Origin": "http://buyttphcm.com.vn",
    "Referer": "http://buyttphcm.com.vn/",
    "User-Agent": "Mozilla/5.0"
}

def route_exists(route_id):
    url = f"{BASE_URL}/getroutebyid/{route_id}"
    try:
        resp = requests.get(url, headers=HEADERS, timeout=5)
        if resp.status_code != 200:
            print(f"❌ route_id={route_id} - HTTP {resp.status_code}")
            return False
        data = resp.json()
        if not data:
            print(f"❌ route_id={route_id} - Response empty or null")
            return False
        if isinstance(data, dict):
            valid = data.get("RouteId") == route_id
            print(f"✅ route_id={route_id} - valid={valid}")
            return valid
        if isinstance(data, list) and len(data) > 0:
            valid = data[0].get("RouteId") == route_id
            print(f"✅ route_id={route_id} - valid={valid}")
            return valid
        print(f"❌ route_id={route_id} - Unexpected data format")
        return False
    except Exception as e:
        print(f"❌ route_id={route_id} - Exception: {e}")
        return False

def main():
    valid_routes = []
    for i in range(1, 1001):
        if route_exists(i):
            valid_routes.append(i)

    print("\n=== Danh sách route_id hợp lệ ===")
    print(valid_routes)

if __name__ == "__main__":
    main()

route_ids = [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 82, 84, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 124, 125, 127, 128, 129, 130, 131, 133, 134, 137, 178, 179, 199, 204, 214, 215, 302, 303, 304, 335, 336, 337, 340, 344, 345, 346, 347, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 371, 372, 373, 375, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390]

print("Tổng số tuyến hợp lệ:", len(route_ids))

"""# Lấy tất cả tuyến"""

import requests
import json
import os
from time import sleep

BASE_URL = "http://apicms.ebms.vn/businfo"
HEADERS = {
    "Accept": "*/*",
    "Origin": "http://buyttphcm.com.vn",
    "Referer": "http://buyttphcm.com.vn/",
    "User-Agent": "Mozilla/5.0"
}

def fetch_json(url):
    try:
        resp = requests.get(url, headers=HEADERS)
        if resp.status_code == 200:
            return resp.json()
        else:
            print(f"❌ HTTP {resp.status_code} tại {url}")
            return None
    except Exception as e:
        print(f"❌ Lỗi khi gọi {url}: {e}")
        return None

def get_route_data(route_id):
    print(f"\n🚍 Đang lấy dữ liệu cho RouteId: {route_id}")
    route_data = {
        "RouteId": route_id,
        "getroutebyid": None,
        "gettimetablebyroute": [],
        "gettripsbytimetable": {},
        "getvarsbyroute": [],
        "getpathsbyvar": {},
        "getstopsbyvar": {}
    }

    # 1. /getroutebyid
    url = f"{BASE_URL}/getroutebyid/{route_id}"
    route_data["getroutebyid"] = fetch_json(url)

    # 2. /gettimetablebyroute
    url = f"{BASE_URL}/gettimetablebyroute/{route_id}"
    tt_data = fetch_json(url)
    if not isinstance(tt_data, list):
        print(f"❌ Không lấy được timetable hợp lệ cho RouteId={route_id}")
        return route_data
    route_data["gettimetablebyroute"] = tt_data

    # 3. gettripsbytimetable cho từng TimeTableId
    for tt in tt_data:
        tt_id = tt.get("TimeTableId")
        if tt_id:
            url_tt = f"{BASE_URL}/gettripsbytimetable/{route_id}/{tt_id}"
            trips = fetch_json(url_tt)
            route_data["gettripsbytimetable"][str(tt_id)] = trips
            sleep(0.2)

    # 4. /getvarsbyroute
    url = f"{BASE_URL}/getvarsbyroute/{route_id}"
    vars_data = fetch_json(url)
    if not isinstance(vars_data, list):
        print(f"❌ Không lấy được vars hợp lệ cho RouteId={route_id}")
        return route_data
    route_data["getvarsbyroute"] = vars_data

    # 5. getpathsbyvar và getstopsbyvar cho từng RouteVarId
    for var in vars_data:
        var_id = var.get("RouteVarId")
        if var_id is None:
            continue
        url_path = f"{BASE_URL}/getpathsbyvar/{route_id}/{var_id}"
        url_stop = f"{BASE_URL}/getstopsbyvar/{route_id}/{var_id}"
        path_data = fetch_json(url_path)
        stop_data = fetch_json(url_stop)
        route_data["getpathsbyvar"][str(var_id)] = path_data
        route_data["getstopsbyvar"][str(var_id)] = stop_data
        sleep(0.2)

    return route_data

def main():
    print("📥 Nhập danh sách RouteId, cách nhau bởi dấu phẩy (vd: 1,6,78,384):")
    route_ids_input = input("👉 RouteIds: ").strip()
    route_ids = [rid.strip() for rid in route_ids_input.split(",") if rid.strip().isdigit()]

    if not route_ids:
        print("❌ Không có RouteId hợp lệ.")
        return

    all_data = {}

    for route_id in route_ids:
        route_data = get_route_data(route_id)
        all_data[route_id] = route_data
        sleep(0.5)

    os.makedirs("output", exist_ok=True)
    output_path = "output/all_routes_data.json"
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(all_data, f, ensure_ascii=False, indent=2)

    print(f"\n🎉 Hoàn tất! Dữ liệu lưu tại: {output_path}")

if __name__ == "__main__":
    main()